substitutions:
  _REGION: asia-southeast1
  _SERVICE: ai-services
  _REPO: bloocube
  _IMAGE_TAG: latest
  _ALLOWED_CORS_ORIGINS: https://bloocube.com,https://admin.bloocube.com,https://api-backend.bloocube.com,https://api-ai-services.bloocube.com
  _ALLOWED_HOSTS: bloocube.com,admin.bloocube.com,api-backend.bloocube.com,api-ai-services.bloocube.com,localhost,127.0.0.1,*

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'  # Use high-CPU machine for heavy AI dependencies
  diskSizeGb: 100  # Increase disk size for large packages
  substitution_option: 'ALLOW_LOOSE'

steps:
  # Build image
  - name: gcr.io/cloud-builders/docker
    args:
      - build
      - '-f'
      - 'AI-services/Dockerfile'
      - '-t'
      - '$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPO/$_SERVICE:$_IMAGE_TAG'
      - '--build-arg'
      - 'BUILDKIT_INLINE_CACHE=1'
      - '--progress=plain'
      - 'AI-services'
    timeout: '1800s'  # 30 minutes timeout for heavy dependencies

  # Push image
  - name: gcr.io/cloud-builders/docker
    args:
      - push
      - '$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPO/$_SERVICE:$_IMAGE_TAG'

  # Deploy to Cloud Run
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: gcloud
    args:
      - run
      - deploy
      - '$_SERVICE'
      - '--image=$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPO/$_SERVICE:$_IMAGE_TAG'
      - '--region=$_REGION'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--cpu=4'
      - '--memory=8Gi'
      - '--timeout=900'
      - '--min-instances=1'
      - '--max-instances=10'
      - '--concurrency=80'
      - '--port=8080'
      - '--set-env-vars=NODE_ENV=production,ENVIRONMENT=production,LOG_LEVEL=info,ALLOWED_CORS_ORIGINS=${_ALLOWED_CORS_ORIGINS},ALLOWED_HOSTS=${_ALLOWED_HOSTS},AI_SERVICE_NAME=bloocube-ai-service,AI_SERVICE_VERSION=1.0.0'

  # Health check after deployment
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: bash
    args:
      - -c
      - |
        echo "üîç Waiting for service to be ready..."
        sleep 30
        
        # Get the service URL
        SERVICE_URL=$$(gcloud run services describe $_SERVICE --region=$_REGION --format="value(status.url)")
        echo "üåê Service URL: $$SERVICE_URL"
        
        # Test health endpoint
        echo "üß™ Testing health endpoint..."
        curl -f "$$SERVICE_URL/health" || echo "‚ùå Health check failed"
        
        # Test root endpoint
        echo "üß™ Testing root endpoint..."
        curl -f "$$SERVICE_URL/" || echo "‚ùå Root endpoint failed"
        
        # Test docs endpoint
        echo "üß™ Testing docs endpoint..."
        curl -f "$$SERVICE_URL/docs" || echo "‚ùå Docs endpoint failed"
        
        echo "‚úÖ Deployment verification completed"

images:
  - '$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPO/$_SERVICE:$_IMAGE_TAG'


