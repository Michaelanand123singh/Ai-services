# =============================================================================
# BLOOCUBE AI SERVICES - GCP CLOUD BUILD CONFIGURATION
# =============================================================================

substitutions:
  _REGION: asia-southeast1
  _SERVICE: ai-services
  _REPO: bloocube
  _IMAGE_TAG: latest
  _ALLOWED_CORS_ORIGINS: https://bloocube.com,https://admin.bloocube.com,https://api-backend.bloocube.com,https://api-ai-services.bloocube.com
  _ALLOWED_HOSTS: bloocube.com,admin.bloocube.com,api-backend.bloocube.com,api-ai-services.bloocube.com,localhost,127.0.0.1

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'  # High CPU for heavy AI dependencies
  diskSizeGb: 200  # Increased disk size for large packages
  substitution_option: 'ALLOW_LOOSE'
  env:
    - 'DOCKER_BUILDKIT=1'
    - 'BUILDKIT_PROGRESS=plain'

steps:
  # =============================================================================
  # STEP 1: BUILD DOCKER IMAGE
  # =============================================================================
  - name: gcr.io/cloud-builders/docker
    id: 'build-image'
    args:
      - build
      - '-f'
      - 'Dockerfile'
      - '-t'
      - 'gcr.io/$PROJECT_ID/github.com/michaelanand123singh/$_SERVICE:$SHORT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/github.com/michaelanand123singh/$_SERVICE:latest'
      - '--build-arg'
      - 'BUILDKIT_INLINE_CACHE=1'
      - '--progress=plain'
      - '--no-cache'
      - '.'
    timeout: '2400s'  # 40 minutes for heavy AI dependencies
    waitFor: ['-']

  # =============================================================================
  # STEP 2: PUSH IMAGE TO REGISTRY
  # =============================================================================
  - name: gcr.io/cloud-builders/docker
    id: 'push-image'
    args:
      - push
      - '--all-tags'
      - 'gcr.io/$PROJECT_ID/github.com/michaelanand123singh/$_SERVICE'
    timeout: '600s'
    waitFor: ['build-image']

  # =============================================================================
  # STEP 3: DEPLOY TO CLOUD RUN
  # =============================================================================
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: 'deploy-service'
    entrypoint: gcloud
    args:
      - run
      - deploy
      - '$_SERVICE'
      - '--image=gcr.io/$PROJECT_ID/github.com/michaelanand123singh/$_SERVICE:$SHORT_SHA'
      - '--region=$_REGION'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--cpu=4'
      - '--memory=8Gi'
      - '--timeout=900'
      - '--min-instances=1'
      - '--max-instances=10'
      - '--concurrency=80'
      - '--port=8080'
      - '--set-env-vars=NODE_ENV=production,ENVIRONMENT=production,LOG_LEVEL=info,ALLOWED_CORS_ORIGINS=${_ALLOWED_CORS_ORIGINS},ALLOWED_HOSTS=${_ALLOWED_HOSTS},AI_SERVICE_NAME=bloocube-ai-service,AI_SERVICE_VERSION=1.0.0,UVICORN_WORKERS=1,AI_SERVICE_PORT=8080,AI_SERVICE_HOST=0.0.0.0,PORT=8080,PRIMARY_AI_PROVIDER=gemini,ENABLE_AI_FALLBACK=true'
    timeout: '600s'
    waitFor: ['push-image']

  # =============================================================================
  # STEP 4: HEALTH CHECK AND VERIFICATION
  # =============================================================================
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: 'health-check'
    entrypoint: bash
    args:
      - -c
      - |
        echo "üîç Waiting for service to be ready..."
        sleep 45
        
        # Get the service URL
        SERVICE_URL=$$(gcloud run services describe $_SERVICE --region=$_REGION --format="value(status.url)")
        echo "üåê Service URL: $$SERVICE_URL"
        
        # Test endpoints in order of complexity
        echo "üß™ Testing ping endpoint..."
        if curl -f -s --max-time 30 "$$SERVICE_URL/ping"; then
          echo "‚úÖ Ping endpoint working"
        else
          echo "‚ùå Ping endpoint failed"
          exit 1
        fi
        
        echo "üß™ Testing test endpoint..."
        if curl -f -s --max-time 30 "$$SERVICE_URL/test"; then
          echo "‚úÖ Test endpoint working"
        else
          echo "‚ùå Test endpoint failed"
          exit 1
        fi
        
        echo "üß™ Testing root endpoint..."
        if curl -f -s --max-time 30 "$$SERVICE_URL/"; then
          echo "‚úÖ Root endpoint working"
        else
          echo "‚ùå Root endpoint failed"
          exit 1
        fi
        
        echo "üß™ Testing health endpoint..."
        if curl -f -s --max-time 30 "$$SERVICE_URL/health"; then
          echo "‚úÖ Health endpoint working"
        else
          echo "‚ùå Health endpoint failed"
          exit 1
        fi
        
        echo "üß™ Testing docs endpoint..."
        if curl -f -s --max-time 30 "$$SERVICE_URL/docs"; then
          echo "‚úÖ Docs endpoint working"
        else
          echo "‚ùå Docs endpoint failed"
          exit 1
        fi
        
        echo "‚úÖ All health checks passed!"
        echo "üéâ Bloocube AI Services deployed successfully!"
    timeout: '300s'
    waitFor: ['deploy-service']

  # =============================================================================
  # STEP 5: CLEANUP OLD IMAGES (OPTIONAL)
  # =============================================================================
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: 'cleanup'
    entrypoint: bash
    args:
      - -c
      - |
        echo "üßπ Cleaning up old images..."
        # Keep only the latest 5 images
        gcloud container images list-tags gcr.io/$PROJECT_ID/github.com/michaelanand123singh/$_SERVICE \
          --sort-by=~timestamp \
          --limit=100 \
          --format="value(digest)" | tail -n +6 | xargs -r -I {} gcloud container images delete --quiet gcr.io/$PROJECT_ID/github.com/michaelanand123singh/$_SERVICE@{} || true
        echo "‚úÖ Cleanup completed"
    timeout: '300s'
    waitFor: ['health-check']

# =============================================================================
# IMAGES TO PUBLISH
# =============================================================================
images:
  - 'gcr.io/$PROJECT_ID/github.com/michaelanand123singh/$_SERVICE:latest'
  - 'gcr.io/$PROJECT_ID/github.com/michaelanand123singh/$_SERVICE:$SHORT_SHA'

# =============================================================================
# SUBSTITUTION VARIABLES
# =============================================================================
substitutions:
  _CLOUDSQL_INSTANCE: ''  # Add your Cloud SQL instance if needed